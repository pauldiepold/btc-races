-- Umbenennung zu sent_emails für bessere Semantik
CREATE TABLE "public"."sent_emails" (
    "id" BIGINT GENERATED BY DEFAULT AS IDENTITY,
    "registration_id" BIGINT REFERENCES "public"."registrations"("id") ON DELETE CASCADE,
    "email_type" TEXT NOT NULL,
    "subject" TEXT NOT NULL,
    "token" TEXT,
    "token_expires_at" TIMESTAMP WITH TIME ZONE,
    "token_verified_at" TIMESTAMP WITH TIME ZONE,
    "status" TEXT NOT NULL DEFAULT 'pending',
    "sent_at" TIMESTAMP WITH TIME ZONE,
    "error" TEXT,
    "retry_count" INTEGER DEFAULT 0,
    "created_at" TIMESTAMP WITH TIME ZONE DEFAULT now(),
    "updated_at" TIMESTAMP WITH TIME ZONE DEFAULT now(),
    PRIMARY KEY ("id")
);

-- Indizes anpassen
CREATE INDEX "sent_emails_registration_id_idx" ON "public"."sent_emails" ("registration_id");
CREATE INDEX "sent_emails_token_idx" ON "public"."sent_emails" ("token") WHERE "token" IS NOT NULL;
CREATE INDEX "sent_emails_status_idx" ON "public"."sent_emails" ("status");

-- Trigger für updated_at
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_sent_emails_updated_at
    BEFORE UPDATE ON "public"."sent_emails"
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

-- RLS aktivieren
ALTER TABLE "public"."sent_emails" ENABLE ROW LEVEL SECURITY;

-- RLS Policy - nur authentifizierte Benutzer (Admins) haben Zugriff
CREATE POLICY "Enable all access for authenticated users only" 
    ON "public"."sent_emails" 
    TO "authenticated" 
    USING (true);

-- Berechtigungen
GRANT ALL ON TABLE "public"."sent_emails" TO "postgres", "service_role";
GRANT USAGE ON SEQUENCE "public"."sent_emails_id_seq" TO "postgres", "service_role";

-- ZWEITE MIGRATION: Entferne nicht mehr benötigte Spalten und erstelle Views

-- Entferne nicht mehr benötigte Spalten aus der registrations-Tabelle
ALTER TABLE "public"."registrations" DROP COLUMN IF EXISTS "verification_token";
ALTER TABLE "public"."registrations" DROP COLUMN IF EXISTS "verified_at";

-- View für Mitglieder mit E-Mail-Adressen
CREATE OR REPLACE VIEW "public"."members_with_emails" AS
SELECT 
    m.id,
    m.name,
    m.has_ladv_startpass,
    m.has_left,
    m.created_at,
    m.updated_at,
    e.email
FROM 
    members m
LEFT JOIN 
    emails e ON m.id = e.member_id;

-- View für Registrierungen mit allen relevanten Details
CREATE OR REPLACE VIEW "public"."registrations_with_details" AS
SELECT 
    r.id,
    r.member_id,
    r.competition_id,
    r.status,
    r.notes,
    r.created_at,
    r.updated_at,
    -- Member details
    m.name as member_name,
    e.email as member_email,
    m.has_ladv_startpass,
    -- Competition details
    c.name as competition_name,
    c.date as competition_date,
    c.location as competition_location,
    c.registration_deadline,
    c.race_type,
    c.championship_type
FROM 
    registrations r
JOIN 
    members m ON r.member_id = m.id
JOIN 
    emails e ON m.id = e.member_id
JOIN 
    competitions c ON r.competition_id = c.id;

-- Neue View für gesendete E-Mails mit Details
CREATE OR REPLACE VIEW "public"."sent_emails_with_details" AS
SELECT 
    se.id,
    se.registration_id,
    se.email_type,
    se.subject,
    se.token,
    se.token_expires_at,
    se.token_verified_at,
    se.status,
    se.sent_at,
    se.error,
    se.retry_count,
    se.created_at,
    se.updated_at,
    -- Registrierungs- und Mitgliedsdaten
    r.member_id,
    m.name as member_name,
    e.email as recipient_email,
    c.name as competition_name,
    c.date as competition_date
FROM 
    sent_emails se
JOIN 
    registrations r ON se.registration_id = r.id
JOIN 
    members m ON r.member_id = m.id
JOIN 
    emails e ON m.id = e.member_id
JOIN 
    competitions c ON r.competition_id = c.id;

-- Öffentliche View für Registrierungen (minimale Daten, keine E-Mail)
CREATE OR REPLACE VIEW "public"."public_registrations" AS
SELECT 
    r.id,
    r.status,
    r.created_at,
    m.name as member_name,
    c.name as competition_name,
    c.date as competition_date
FROM 
    registrations r
JOIN 
    members m ON r.member_id = m.id
JOIN 
    competitions c ON r.competition_id = c.id;

-- Berechtigungen für authentifizierte Benutzer
GRANT SELECT ON "public"."members_with_emails" TO "postgres", "service_role", "authenticated";
GRANT SELECT ON "public"."registrations_with_details" TO "postgres", "service_role", "authenticated";
GRANT SELECT ON "public"."sent_emails_with_details" TO "postgres", "service_role", "authenticated";

-- Berechtigungen für die öffentliche View (für alle verfügbar)
GRANT SELECT ON "public"."public_registrations" TO "postgres", "service_role", "authenticated", "anon";

ALTER TYPE "public"."registration_status" ADD VALUE 'pending_cancellation';
